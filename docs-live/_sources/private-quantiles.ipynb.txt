{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Private Quantiles #"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib as mpl\n",
        "from scipy import stats\n",
        "\n",
        "np.random.seed(1234) # Fix seed for deterministic documentation\n",
        "\n",
        "mpl.style.use(\"seaborn-white\")\n",
        "\n",
        "MD = 28\n",
        "LG = 36\n",
        "plt.rcParams.update({\n",
        "    \"figure.figsize\": [25, 7],\n",
        "    \"legend.fontsize\": MD,\n",
        "    \"axes.labelsize\": LG,\n",
        "    \"axes.titlesize\": LG,\n",
        "    \"xtick.labelsize\": LG,\n",
        "    \"ytick.labelsize\": LG,\n",
        "})\n",
        "\n",
        "def exponential_mechanism_quantile(\n",
        "  values,\n",
        "  options, \n",
        "  scores,\n",
        "  quantile, \n",
        "  epsilon,\n",
        "  sensitivity=1\n",
        "):\n",
        "    \"\"\"\n",
        "    \"\"\"\n",
        "    # Calculate the score for each element of R\n",
        "    sensitivity = 8760\n",
        "    noisy_scores = scores + np.random.laplace(0, sensitivity / epsilon, len(scores))\n",
        "    \n",
        "#     print(noisy_scores)\n",
        "    \n",
        "    max_idx = np.argmax(noisy_scores)\n",
        "    \n",
        "    return options[max_idx]    \n",
        "\n",
        "  \n",
        "values = np.random.pareto(4, 30000*365*24)\n",
        "options = np.linspace(0, 5, num=200)\n",
        "\n",
        "trials = []\n",
        "\n",
        "quantile = 0.99\n",
        "\n",
        "print(np.quantile(values, quantile))\n",
        "\n",
        "def u(values, option, quantile):\n",
        "    # Count the number of data points in `values` < `option`\n",
        "    count = np.sum(values < option)\n",
        "\n",
        "    # Compute quality for quantile\n",
        "    # Returns 0 if `option` is dead-on the quantile\n",
        "    # Returns larger negative values as `option` moves\n",
        "    #   away from the true quantile\n",
        "    N = len(values)\n",
        "    return -np.abs(count - N * quantile)\n",
        "    \n",
        "# scores = [u(values, option, quantile) for option in options]\n",
        "# res = exponential_mechanism_quantile(\n",
        "#   values=values, options=options, scores=scores, quantile=quantile, epsilon=1, sensitivity=8760\n",
        "# )\n",
        "\n",
        "# print(res)\n",
        "\n",
        "# for t in range(100):\n",
        "#     res = exponential_mechanism_quantile(\n",
        "#       values=values, options=options, scores=scores, quantile=quantile, epsilon=0.1, sensitivity=8760\n",
        "#     )\n",
        "#     trials.append(res)\n",
        "    \n",
        "# plt.hist(trials)\n",
        "# plt.show()\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.1618065391817365\n"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "shell.execute_reply": "2020-09-01T23:09:01.890Z",
          "iopub.status.busy": "2020-09-01T23:08:47.593Z",
          "iopub.execute_input": "2020-09-01T23:08:47.596Z",
          "iopub.status.idle": "2020-09-01T23:09:01.873Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from eeprivacy import private_quantile\n",
        "\n",
        "q = 0.5\n",
        "\n",
        "values = np.random.pareto(4, 3000*365*24)\n",
        "\n",
        "result = private_quantile(\n",
        "  values=values, \n",
        "  options=np.linspace(0, 5, num=200),\n",
        "  quantile=q,\n",
        "  epsilon=1,\n",
        "  sensitivity=8760\n",
        ")\n",
        "\n",
        "print(np.quantile(values, q))\n",
        "print(result)\n",
        "\n",
        "# for t in range(5):\n",
        "#     res = exponential_mechanism_quantile(\n",
        "#       values=values, options=options, scores=scores, quantile=quantile, epsilon=0.1, sensitivity=8760\n",
        "#     )\n",
        "#     trials.append(res)\n",
        "    \n",
        "# plt.hist(trials)\n",
        "# plt.show()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.1892265523106994\n",
            "0.20100502512562815\n"
          ]
        }
      ],
      "execution_count": 5,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2020-09-01T23:09:41.820Z",
          "iopub.execute_input": "2020-09-01T23:09:41.823Z",
          "iopub.status.idle": "2020-09-01T23:09:50.231Z",
          "shell.execute_reply": "2020-09-01T23:09:50.237Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernelspec": {
      "argv": [
        "/Users/marc/venvs/edv-pilot/bin/python",
        "-m",
        "ipykernel_launcher",
        "-f",
        "{connection_file}"
      ],
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "nteract": {
      "version": "0.24.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}